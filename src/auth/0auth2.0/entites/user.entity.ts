import { ApiProperty } from '@nestjs/swagger';
import { Skill } from 'src/profile/entities/skills.entity';
import { CollabRequest } from 'src/projects/entities/collabRequest.entity';
import { Project } from 'src/projects/entities/projects.entity';
import {
  Column,
  Entity,
  JoinTable,
  ManyToMany,
  OneToMany,
  PrimaryColumn,
} from 'typeorm';
import { Role } from '../enums';
@Entity()
export class User {
  @ApiProperty({
    description: 'custom user id generated by uuid module',
  })
  @PrimaryColumn()
  userId: string;

  @ApiProperty({
    description: 'username of the user',
  })
  @Column()
  userName: string;

  @ApiProperty({
    description: 'first name',
  })
  @Column({ default: '' })
  firstName: string;

  @ApiProperty({
    description: 'last name',
  })
  @Column({ default: '' })
  lastName: string;

  @ApiProperty({
    description: 'position or designation',
  })
  @Column({ default: '' })
  position: string;

  @ApiProperty({
    description: 'major of study',
  })
  @Column({ default: '' })
  major: string;

  @ApiProperty({
    description: 'a bio explaining users intro',
  })
  @Column({ default: '', length: 550 })
  bio: string;

  @ApiProperty({
    description: 'email of the user',
  })
  @Column()
  email: string;

  @ApiProperty({
    description: 'hashed password',
  })
  @Column()
  password: string;

  @ApiProperty({
    description: 'User Role',
  })
  @Column({
    type: 'enum',
    enum: Role,
    default: Role.NOT_SET,
  })
  role: Role;

  @ApiProperty({
    description: 'hashed refresh token',
  })
  @Column({
    default: null,
  })
  hashedRt: string;

  @ApiProperty({
    description: 'user verification status',
  })
  @Column({
    default: false,
  })
  isVerified: boolean;

  @ApiProperty({
    description: 'profile Image of user',
  })
  @Column({
    default: false,
  })
  profileImageUrl: string;

  @ApiProperty({
    description: 'cover Image of user',
  })
  @Column({
    default: false,
  })
  coverImageUrl: string;

  // note , convert to string and store. when retrieving , get in form of parsed JSON.
  @ApiProperty({
    description: 'urls of portfolio images ',
  })
  @Column({
    default: '[]',
    length: 5000,
  })
  portfolioUrls: string;

  @OneToMany(() => Skill, (skill) => skill.skillForUser)
  skills: Skill[];

  @OneToMany(() => Project, (project) => project.projectOwner, {
    cascade: true,
    onDelete: 'CASCADE',
  })
  ownerInProject: Project;

  @OneToMany(
    () => CollabRequest,
    (collabRequest) => collabRequest.collabRequestedBy,
  )
  collabRequestSender: CollabRequest[];

  @ManyToMany(() => Project, (project) => project.contributerInProjects, {
    cascade: true,
    onDelete: 'CASCADE',
  })
  contributerInProject: Project;

  @ManyToMany(() => Project, (project) => project.likedBy, {
    cascade: true,
    onDelete: 'CASCADE',
  })
  @JoinTable()
  likedProjects: Project;
}
